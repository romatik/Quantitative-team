View(moverall_cast)
View(dataset)
t.testing <- overall_likert %>%
group_by(Course.name) %>%
lapply(t.test)
library(dplyr)
library(likert)
library(foreign)
library(stats)
library(reshape)
library(xtable)
library(xlsx) #load the package
t.testing <- overall_likert %>%
group_by(Course.name) %>%
lapply(t.test)
t.testing <- overall_likert %>%
group_by(Course.name) %>%
lapply(., t.test)
library(swirl)
rm(list=ls())
install_course_github("dgrtwo", "RData", branch="quizzes", multi=TRUE)
swirl()
library(ggplot2)
data(diamonds)
nxt()
library(ggplot2)
data(diamonds)
view(diamonds)
View(diamonds)
ggplot(data = diamonds, aes(x = carat, y = price)) + geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = color)) + geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) + geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity, size = cut )) + geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity, shape = cut )) + geom_point()
ggplot(data = diamonds, aes(x = carat, y = price )) + geom_point() + geom_smooth()
ggplot(data = diamonds, aes(x = carat, y = price )) + geom_point() + geom_smooth(se = FALSE)
ggplot(data = diamonds, aes(x = carat, y = price )) + geom_point() + geom_smooth(se = FALSE, method = "lm")
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_point() + geom_smooth()
ggplot(data = diamonds, aes(x = carat, y = price, color = clarity)) + geom_smooth()
swirl()
ggplot(data = diamonds, aes(x = z, y = price )) + geom_point()
ggplot(data = diamonds, aes(x = z, y = price, color = cut)) + geom_point()
ggplot(data = diamonds, aes(x = z, y = price, color = cut)) + geom_point() + geom_smooth()
data(Orange)
View(Orange)
> ggplot(data = Orange, aes(x = age, y = circumference )) + geom_point()
ggplot(data = Orange, aes(x = age, y = circumference )) + geom_point()
ggplot(data = Orange, aes(x = age, y = circumference, color = Tree)) + geom_point()
ggplot(data = Orange, aes(x = age, y = circumference, color = Tree)) + geom_point() + geom_smooth(method = "lm")
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) + geom_point() + facet_wrap(~ clarity)
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) + geom_point() + facet_grid(color~ clarity)
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) + geom_point() + ggtitle("My scatter plot")
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) + geom_point() + ggtitle("My scatter plot") + xlab("Weight (carats)")
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) + geom_point() + ggtitle("My scatter plot") + xlab("Weight (carats)")+
xlim(0, 2)
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) + geom_point() + ggtitle("My scatter plot") + scale_y_log10()
swirl()
ggplot(data = diamonds, aes(x = price)) + geom_histogram() + ggtitle("My scatter plot")
ggplot(data = diamonds, aes(x = price)) + geom_histogram(binwidth = 2000) + ggtitle("My scatter plot")
ggplot(data = diamonds, aes(x = price)) + geom_histogram(binwidth = 200) + ggtitle("My scatter plot")
ggplot(data = diamonds, aes(x = price)) + geom_histogram(binwidth = 200) + ggtitle("My scatter plot") + facet_wrap(~clarity)
ggplot(data = diamonds, aes(x = price)) + geom_histogram(binwidth = 200) + ggtitle("My scatter plot") + facet_wrap(~clarity, scale = "free_y")
ggplot(data = diamonds, aes(x = price, fill = clarity)) + geom_histogram(binwidth = 200) + ggtitle("My scatter plot")
ggplot(data = diamonds, aes(x = price)) + geom_density()
ggplot(data = diamonds, aes(x = price, color = cut)) + geom_density()
ggplot(diamonds, aes(x = color, y = price)) + geom_boxplot()
ggplot(diamonds, aes(x = color, y = price)) + geom_boxplot() + scale_y_log10()
ggplot(diamonds, aes(x = color, y = price)) + geom_violin() + scale_y_log10()
ggplot(diamonds, aes(x = color, y = price)) + geom_violin() + scale_y_log10() + facet_wrap(~clarity)
x <- rnorm(1000)
qplot(x)
qplot(x, binwidth = 1)
qplot(x, binwidth = 1) + xlab("Random")
y <- rnorm(1000)
qplot(x, y)
qplot(x, y) + geom_smooth()
data("WorldPhones")
View(WorldPhones)
library(reshape2)
worldphones.m <- melt(WorldPhones)
colnames(worldphones.m) <- c("Year", "Continent", "Phones")
ggplot(worldphones.m, aes(x = Year, y = Phones, color = Continent)) + geom_point()
ggplot(worldphones.m, aes(x = Year, y = Phones, color = Continent)) + geom_line()
ggplot(worldphones.m, aes(x = Year, y = Phones, color = Continent)) + geom_line() + scale_y_log10()
p = ggplot(worldphones.m, aes(x = Year, y = Phones, color = Continent)) + geom_line() + scale_y_log10()
install.packages("Quandl")
library(Quandl)
Quandl.search("NHL")
Quandl.search("hockey")
Quandl.search("national hockey league")
library(dplyr)
library(likert)
library(foreign)
library(stats)
library(reshape)
library(xtable)
library(xlsx) #load the package
dataset <- read.csv(file = "../Dataset_2.csv", na.strings = c("", " ", "No answer", "N/A"), header = TRUE)
university <- select(dataset_tbl,
id,
Course.type,
Course.name,
Graduated,
Start.year,
Finish.year,
Nationality,
Other.nationality,
Second.nationality,
Age,
Gender,
starts_with("X1.4"),
starts_with("X2.1"),
starts_with("X2.2"),
starts_with("X2.3"),
starts_with("X2.5.1"),
starts_with("X4.2"),
starts_with("X5.1"))
#dataset with questions about entire course
overall <- select(dataset,
id,
Course.type,
Course.name,
Graduated,
Start.year,
Finish.year,
Nationality,
Other.nationality,
Second.nationality,
Age,
Gender,
X2.5.2..How.could.your.orientation.and.integration.experience..either.professional.or.personal..have.been.improved.in.any.way.,
X3.1..I.could.approach.my.course.coordinator.with.questions.or.problems.related.to.my.studies.and.mobility.experience..,
X3.1..My.course.coordinator.referred.me.to.appropriate.university.administrative.resources.as.needed..,
X3.1..I.felt.confident.that.my.course.coordinator.would.follow.up.on.any.unresolved.administrative.issues.or.questions.after.addressing.these.with.him.her..,
X4.1.1..Formalized.feedback.system..All.universities.combined,
X4.1.2..Formalized.feedback.system..Consortium,
X4.3..Describe.course.feedback.channels,
X4.5..Procedure.for.raising.issues.with.the.entire.consortium,
X4.6..Consortium.implementing.recommendaions.given.by.students,
X4.6...Comment,
X4.7..Recommendation.to.improve.feedback.channels,
X5.2..My.lecturers.provided.me.enough.time.for.individual.consultations..,
X5.2..My.lecturers.were.available.by.email.and.responded.in.a.timely.manner..,
X5.2..My.supervisor.provided.valuable.advice.during.my.thesis.work..,
X5.2..Standby.professors.were.available.for.consultation.if.the.lead.supervisor.was.unavailable..,
X6.1..Awareness.over.te.existance.of.EMA,
X6.2..Awareness.over.the.possibility.of.each.course.to.elect.an.EMA.course.representative,
X6.3..Most.important.issue.to.be.addressed.by.course.representative,
X7.1..Three.most.important.aspects.of.student.experience.that.could.be.improved,
X7.2..Additional.comments.and.suggestions,
X8.1..Overall.academic.quality,
X8.2..Overall.balance.of.course.workload,
X8.3..Consistency.of.assessment,
X8.4..Quality.of.internship,
X8.5..Use.of.innovative.technologies,
X8.6..Understanding.the.state.of.the.art.of.your.discipline,
X8.7..Balance.of.academic.mobility.path.in.relation.to.academic.needs,
X9.1..Achievement.beyond.expectations,
X9.2..Provision.of.certificates..transcripts.etc,
X9.3..Enhancement.of.employment,
X9.4..Information.about.degree.and.certificates,
X9.5..Provision.of.soft.skills,
X9.6..Provision.of.monthly.allowance)
NAs <- overall == c("organization, schedules, communication.") #deleting wrong answers from couple of questions
overall[NAs] <- NA
adequate_levels <- c("Very inadequate", "Inadequate", "Adequate", "Good", "Excellent") #creating ordered levels of Likert-scales
agree_levels <- c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree")
feedback_levels <- c("No, none of the universities", "Somewhat (weak or unclear systems)", "I am not sure", "Some do, other do not", "Yes, all universities do")
#explicitly recoding levels for questions to follow ordered levels
overall[,"X3.1..I.could.approach.my.course.coordinator.with.questions.or.problems.related.to.my.studies.and.mobility.experience.."] <-
factor(overall[,"X3.1..I.could.approach.my.course.coordinator.with.questions.or.problems.related.to.my.studies.and.mobility.experience.."], levels=agree_levels)
overall[,"X3.1..My.course.coordinator.referred.me.to.appropriate.university.administrative.resources.as.needed.."] <-
factor(overall[,"X3.1..My.course.coordinator.referred.me.to.appropriate.university.administrative.resources.as.needed.."], levels=agree_levels)
overall[,"X3.1..I.felt.confident.that.my.course.coordinator.would.follow.up.on.any.unresolved.administrative.issues.or.questions.after.addressing.these.with.him.her.."] <-
factor(overall[,"X3.1..I.felt.confident.that.my.course.coordinator.would.follow.up.on.any.unresolved.administrative.issues.or.questions.after.addressing.these.with.him.her.."], levels=agree_levels)
overall[,"X4.1.1..Formalized.feedback.system..All.universities.combined"] <-
factor(overall[,"X4.1.1..Formalized.feedback.system..All.universities.combined"], levels=feedback_levels)
overall[,"X4.1.2..Formalized.feedback.system..Consortium"] <-
factor(overall[,"X4.1.2..Formalized.feedback.system..Consortium"], levels=c("No", "I am not sure", "Somewhat (weak or unclear systems)", "Yes"))
overall[,"X4.3..Describe.course.feedback.channels"] <-
factor(overall[,"X4.3..Describe.course.feedback.channels"], levels=c("Very Weak", "Weak", "I am not sure", "Adequate", "Strong", "Very strong"))
overall[,"X4.6..Consortium.implementing.recommendaions.given.by.students"] <-
factor(overall[,"X4.6..Consortium.implementing.recommendaions.given.by.students"], levels=c("No", "Yes"))
overall[,"X5.2..My.lecturers.provided.me.enough.time.for.individual.consultations.."] <-
factor(overall[,"X5.2..My.lecturers.provided.me.enough.time.for.individual.consultations.."], levels=agree_levels)
overall[,"X5.2..My.lecturers.were.available.by.email.and.responded.in.a.timely.manner.."] <-
factor(overall[,"X5.2..My.lecturers.were.available.by.email.and.responded.in.a.timely.manner.."], levels=agree_levels)
overall[,"X5.2..My.supervisor.provided.valuable.advice.during.my.thesis.work.."] <-
factor(overall[,"X5.2..My.supervisor.provided.valuable.advice.during.my.thesis.work.."], levels=agree_levels)
overall[,"X5.2..Standby.professors.were.available.for.consultation.if.the.lead.supervisor.was.unavailable.."] <-
factor(overall[,"X5.2..Standby.professors.were.available.for.consultation.if.the.lead.supervisor.was.unavailable.."], levels=agree_levels)
overall[,"X8.1..Overall.academic.quality"] <-
factor(overall[,"X8.1..Overall.academic.quality"], levels=adequate_levels)
overall[,"X8.2..Overall.balance.of.course.workload"] <-
factor(overall[,"X8.2..Overall.balance.of.course.workload"], levels=adequate_levels)
overall[,"X8.3..Consistency.of.assessment"] <-
factor(overall[,"X8.3..Consistency.of.assessment"], levels=adequate_levels)
overall[,"X8.4..Quality.of.internship"] <-
factor(overall[,"X8.4..Quality.of.internship"], levels=adequate_levels)
overall[,"X8.5..Use.of.innovative.technologies"] <-
factor(overall[,"X8.2..Overall.balance.of.course.workload"], levels=adequate_levels)
overall[,"X8.5..Use.of.innovative.technologies"] <-
factor(overall[,"X8.2..Overall.balance.of.course.workload"], levels=adequate_levels)
overall[,"X8.6..Understanding.the.state.of.the.art.of.your.discipline"] <-
factor(overall[,"X8.2..Overall.balance.of.course.workload"], levels=adequate_levels)
overall[,"X8.6..Understanding.the.state.of.the.art.of.your.discipline"] <-
factor(overall[,"X8.2..Overall.balance.of.course.workload"], levels=adequate_levels)
overall[,"X8.7..Balance.of.academic.mobility.path.in.relation.to.academic.needs"] <-
factor(overall[,"X8.7..Balance.of.academic.mobility.path.in.relation.to.academic.needs"], levels=adequate_levels)
overall[,"X9.1..Achievement.beyond.expectations"] <-
factor(overall[,"X9.1..Achievement.beyond.expectations"], levels=adequate_levels)
overall[,"X9.2..Provision.of.certificates..transcripts.etc"] <-
factor(overall[,"X9.2..Provision.of.certificates..transcripts.etc"], levels=adequate_levels)
overall[,"X9.3..Enhancement.of.employment"] <-
factor(overall[,"X9.3..Enhancement.of.employment"], levels=adequate_levels)
overall[,"X9.4..Information.about.degree.and.certificates"] <-
factor(overall[,"X9.4..Information.about.degree.and.certificates"], levels=adequate_levels)
overall[,"X9.5..Provision.of.soft.skills"] <-
factor(overall[,"X9.5..Provision.of.soft.skills"], levels=adequate_levels)
overall[,"X9.6..Provision.of.monthly.allowance"] <-
factor(overall[,"X9.6..Provision.of.monthly.allowance"], levels=adequate_levels)
#choosing only questions with likert scale to find out best courses
overall_likert <- select(overall,
id,
Course.name,
starts_with("X3.1"),
starts_with("X4.1"),
starts_with("X4.3"),
starts_with("X5.2"),
starts_with("X8"),
starts_with("X9"))
#creating a table with number of times each level is occuring for each individual program
moverall <- melt(overall_likert, id = c("id", "Course.name"), na.rm = TRUE)
moverall_cast <- cast(moverall, Course.name~variable+value)
#creating a vector with number of respondents for each course
respondents <- as.vector(summary(overall$Course.name))
moverall_cast[,2:116] <- moverall_cast[,2:116]/respondents #creating table with relative numbers
#reading weights from the Excel file
weights <- read.xlsx ("weights.xlsx", sheetIndex = 1, header= FALSE)
#multiplying by weights
moverall_cast[,2:116] <- sweep(moverall_cast[,2:116], MARGIN = 2, weights[,1], "*")
#adding a column with final score (sum of all columns)
moverall_cast <- mutate(moverall_cast, score = rowSums(moverall_cast))
moverall_cast <- mutate(moverall_cast, respondents = respondents)
#sorting the table to see the best courses (best at the top)
#sorting is done based on the composite score summing all the values in the table
sorted <- moverall_cast[order(-moverall_cast$score),]
sorted <- select(sorted,
Course.name,
score,
respondents)
question3.1 <- select(moverall_cast,
Course.name,
starts_with("X3.1"))
question4 <- select(moverall_cast,
Course.name,
starts_with("X4"))
question5 <- select(moverall_cast,
Course.name,
starts_with("X5"))
question8 <- select(moverall_cast,
Course.name,
starts_with("X8"))
question9 <- select(moverall_cast,
Course.name,
starts_with("X9"))
ranking <- function(x){
columns <- ncol(x)
x <- mutate(x, score = rowSums(x[,2:columns]))
x <- mutate(x, rank = as.integer(rank(-x$score, ties.method = "first")))
return(x)
}
question3.1 <- ranking(question3.1)
question4 <- ranking(question4)
question5 <- ranking(question5)
question8 <- ranking(question8)
question9 <- ranking(question9)
#creating rankmatrix with results of rankings from the previous step
rankmatrix <- cbind(as.character(question3.1$Course.name), question3.1$rank, question4$rank, question5$rank, question8$rank, question9$rank)
rankmatrix <- as.data.frame(rankmatrix)
rankmatrix$V2 <- as.numeric(as.character(rankmatrix$V2))
rankmatrix$V3 <- as.numeric(as.character(rankmatrix$V3))
rankmatrix$V4 <- as.numeric(as.character(rankmatrix$V4))
rankmatrix$V5 <- as.numeric(as.character(rankmatrix$V5))
rankmatrix$V6 <- as.numeric(as.character(rankmatrix$V6))
rankmatrix$score <- rowMeans (rankmatrix[, 2:6])
View(rankmatrix)
means <- overall_likert %>%
group_by(Course.name) %>%
summarise_each(funs(mean(., na.rm = TRUE)), matches("X"))
means %>%
summarise_each(funs(median(., na.rm = TRUE)), matches("X"))
View(means)
colNames(means)
names(means)
?gsub
gsub(".", " ", names(means))
gsub("\.", " ", names(means))
gsub("\\.", " ", names(means))
names(means) <- gsub("\\.", " ", names(means))
View(means)
par(mar=c(25,5,1,1))
boxplot(means[,-1], las = 2)
ggplot(data = means, aes(x = means[,2:24])) + geom_boxplot()
ggplot(data = melt(means, id.vars = "Course name"), aes(value, variable)) + geom_boxplot()
melt(means, id.vars = "Course name")
View(means)
ggplot(data = melt(means, id.vars = "Course name "), aes(value, variable)) + geom_boxplot()
means <- overall_likert %>%
group_by(Course.name) %>%
summarise_each(funs(mean(., na.rm = TRUE)), matches("X"))
View(means)
ggplot(data = melt(means, id.vars = "Course.name"), aes(value, variable)) + geom_boxplot()
names(means)[1]
ggplot(data = melt(means, id.vars = names(means)[1]), aes(value, variable)) + geom_boxplot()
melt(means)
?match.names
library(reshape2)
ggplot(data = melt(means, id.vars = names(means)[1]), aes(value, variable)) + geom_boxplot()
library(gplots)
install.packages("gplots")
library(gplots)
heatmap.2(means, cexRow = 0.5, cexCol = 0.95, trace = "none")
heatmap.2(means[, 2:24], cexRow = 0.5, cexCol = 0.95, trace = "none")
as.numeric(means)
as.matrix(means)
heatmap.2(as.matrix(means), cexRow = 0.5, cexCol = 0.95, trace = "none")
row.names(means) <- means$Course.name
heatmap.2(as.matrix(means), cexRow = 0.5, cexCol = 0.95, trace = "none")
data.matrix(means)
means_matrix <- data.matrix(means)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 0.95, trace = "none")
View(means_matrix)
means <- means[, 2:24]
View(means)
means_matrix <- data.matrix(means)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 0.95, trace = "none")
View(means_matrix)
View(means)
means <- overall_likert %>%
group_by(Course.name) %>%
summarise_each(funs(mean(., na.rm = TRUE)), matches("X"))
row.names(means) <- means$Course.name
View(means)
means$Course.name <- NULL
View(means)
means_matrix <- data.matrix(means)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 0.95, trace = "none")
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 0.1, trace = "none")
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 5, trace = "none")
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none")
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(12,8))
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20,8))
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20,8), srtCol = 80)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 80)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 80, density.info = 'none')
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, density.info = 'none')
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, density.info = 'none', dendrogram = "none")
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, col = redgreen(75))
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, col = redgreen(10))
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, col = redgreen(10), Colv = FALSE)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, Colv = FALSE)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, Colv = FALSE, scale = "column")
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, Colv = FALSE)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, Colv = FALSE, key = FALSE)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, Colv = FALSE, keysize = 0.5)
dev.off()
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, Colv = FALSE, keysize = 0.5)
par("mar")
par(mar = c(1,1,1,1))
dev.off()
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, Colv = FALSE, keysize = 0.5)
dev.off()
par(mar = c(1,1,1,1))
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, Colv = FALSE, keysize = 0.5)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, Colv = FALSE, keysize = 0.5)
dev.off()
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 20), srtCol = 45, Colv = FALSE, keysize = 0.5)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 10), srtCol = 45, Colv = FALSE, keysize = 0.5)
dev.off()
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 10), srtCol = 45, Colv = FALSE, keysize = 0.5)
dev.off()
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 10), srtCol = 45, Colv = FALSE)
means_matrix$row.names
View(means)
means
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20, 5), srtCol = 45, Colv = FALSE)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(10, 5), srtCol = 45, Colv = FALSE)
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(10, 5), srtCol = 45, Colv = FALSE, keysize = 0.5)
dev.off()
heatmap.2(means_matrix, cexRow = 0.5, cexCol = 1, trace = "none", margins = c(20,20), srtCol = 45, Colv = FALSE, keysize = 0.5)
install.packages("ISLR")
library(ISLR)
library(MASS)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
13*4
4/52
0
3*4/52
2/51
1*0.8/2
1.6*0.8/2
0.64
mypdf
mypdf(1.6) - mypdf(0)
integrate(mypdf,0,1.6)
1/16
sqrt(2)
dice_sqr
ex2_fair <- dice_sqr * dice_fair
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
?ppois
ppois(20, lambda = 16.5*2)
?pnorm
pnorm(70, mean = 80, sd = 10)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75/10)
2^5
1/32
?ppois
ppois(10, 5*3)
swirl()
0.8^3
sum(apply(x = c(3,4,5), choose(5,x)*(.8)^x*(.2)^(5-x)))
dfd
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(2, 5, 0.8, lower.tail = FALSE)
qnorm(0.1)
0
qnorm(0.975, mean = 3, sd = 2)
1.96*2 + 3
pnorm(1200, mean = 1020, sd = 50, lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail = FALSE)
pnorm(0.75, mean = 1020, sd = 50, lower.tail = FALSE)
pnorm(0.75, mean = 1020, sd = 50)
qnorm(0.75, mean = 1020, sd = 50)
0.53
0.53
ppois(3, 2.5*4)
pbinom(5, 1000, .01)
ppois(5, 1000*0.01)
setwd("C:/Users/Misha/Dropbox/Projects/EM Internship/Quantitative team/R Project/Quantitative-team")
library(dplyr)
library(likert)
library(foreign)
library(stats)
library(reshape)
library(xtable)
library(xlsx) #load the package
library(gplots)
library(ggplot2)
View(sorted)
qplot(x = respondents, y = moverall_cast$score)
ggplot(data = moverall_cast, aes(x = respondents, y = score)) +
geom_point(alpha=1, color="#c0392b") +
geom_smooth(alpha=0.25, color="black", fill="black")
cutpoints <- quantile(sorted$score, seq(0, 1, length = 4), na.rm = TRUE)
sorted$scoretert <- cut(sorted$score, cutpoints)
levels(sorted$scoretert)
ggplot(data = moverall_cast, aes(x = respondents, y = score, color = scoretert)) +
geom_point(alpha=1, color="#c0392b") +
geom_smooth(alpha=0.25, color="black", fill="black", method = "lm")
View(sorted)
ggplot(data = moverall_cast, aes(x = respondents, y = score, color = scoretert)) +
geom_smooth(alpha=0.25, color="black", fill="black", method = "lm")
ggplot(data = moverall_cast, aes(x = respondents, y = score, color = scoretert)) +
geom_point() +
geom_smooth(alpha=0.25, color="black", fill="black", method = "lm")
ggplot(data = sorted, aes(x = respondents, y = score, color = scoretert)) +
geom_point() +
geom_smooth(alpha=0.25, color="black", fill="black", method = "lm")
cutpoints <- quantile(sorted$respondents, seq(0, 1, length = 4), na.rm = TRUE)
sorted$scoretert <- cut(sorted$score, cutpoints)
levels(sorted$scoretert)
ggplot(data = sorted, aes(x = respondents, y = score, color = scoretert)) +
geom_point() +
geom_smooth(alpha=0.25, color="black", fill="black", method = "lm")
cutpoints
cutpoints <- quantile(sorted$respondents, seq(0, 1, length = 5), na.rm = TRUE)
cutpoints
sorted$scoretert <- cut(sorted$respondents, cutpoints)
levels(sorted$scoretert)
ggplot(data = sorted, aes(x = respondents, y = score, color = scoretert)) +
geom_point() +
geom_smooth(alpha=0.25, color="black", fill="black", method = "lm")
ggplot(data = sorted, aes(x = respondents, y = score, color = scoretert)) +
geom_point() +
facet_wrap(score ~ scoretert) +
geom_smooth(alpha=0.25, color="black", fill="black", method = "lm")
ggplot(data = sorted, aes(x = respondents, y = score, color = scoretert)) +
geom_point() +
facet_wrap(respondents ~ scoretert) +
geom_smooth(alpha=0.25, color="black", fill="black", method = "lm")
ggplot(data = sorted, aes(x = respondents, y = score, color = scoretert)) +
geom_point() +
geom_smooth(method = "lm")
